///
/// HybridMMKVSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "HybridMMKVSpec.hpp"

namespace margelo::nitro::mmkv {

  void HybridMMKVSpec::loadHybridMethods() {
    // load base methods/properties
    HybridObject::loadHybridMethods();
    // load custom methods/properties
    registerHybrids(this, [](Prototype& prototype) {
      prototype.registerHybridGetter("size", &HybridMMKVSpec::getSize);
      prototype.registerHybridGetter("isReadOnly", &HybridMMKVSpec::getIsReadOnly);
      prototype.registerHybridMethod("initialize", &HybridMMKVSpec::initialize);
      prototype.registerHybridMethod("set", &HybridMMKVSpec::set);
      prototype.registerHybridMethod("getBoolean", &HybridMMKVSpec::getBoolean);
      prototype.registerHybridMethod("getString", &HybridMMKVSpec::getString);
      prototype.registerHybridMethod("getNumber", &HybridMMKVSpec::getNumber);
      prototype.registerHybridMethod("getBuffer", &HybridMMKVSpec::getBuffer);
      prototype.registerHybridMethod("contains", &HybridMMKVSpec::contains);
      prototype.registerHybridMethod("remove", &HybridMMKVSpec::remove);
      prototype.registerHybridMethod("getAllKeys", &HybridMMKVSpec::getAllKeys);
      prototype.registerHybridMethod("clearAll", &HybridMMKVSpec::clearAll);
      prototype.registerHybridMethod("recrypt", &HybridMMKVSpec::recrypt);
      prototype.registerHybridMethod("trim", &HybridMMKVSpec::trim);
      prototype.registerHybridMethod("addOnValueChangedListener", &HybridMMKVSpec::addOnValueChangedListener);
    });
  }

} // namespace margelo::nitro::mmkv
