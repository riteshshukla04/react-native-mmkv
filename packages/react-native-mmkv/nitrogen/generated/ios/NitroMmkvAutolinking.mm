///
/// NitroMmkvAutolinking.mm
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#import <Foundation/Foundation.h>
#import <NitroModules/HybridObjectRegistry.hpp>
#import "NitroMmkv-Swift-Cxx-Umbrella.hpp"
#import <type_traits>

#include "HybridMMKV.hpp"
#include "HybridMMKVFactory.hpp"
#include "HybridMMKVPlatformContextSpecSwift.hpp"

@interface NitroMmkvAutolinking : NSObject
@end

@implementation NitroMmkvAutolinking

+ (void) load {
  using namespace margelo::nitro;
  using namespace margelo::nitro::mmkv;

  HybridObjectRegistry::registerHybridObjectConstructor(
    "MMKV",
    []() -> std::shared_ptr<HybridObject> {
      static_assert(std::is_default_constructible_v<HybridMMKV>,
                    "The HybridObject \"HybridMMKV\" is not default-constructible! "
                    "Create a public constructor that takes zero arguments to be able to autolink this HybridObject.");
      return std::make_shared<HybridMMKV>();
    }
  );
  HybridObjectRegistry::registerHybridObjectConstructor(
    "MMKVFactory",
    []() -> std::shared_ptr<HybridObject> {
      static_assert(std::is_default_constructible_v<HybridMMKVFactory>,
                    "The HybridObject \"HybridMMKVFactory\" is not default-constructible! "
                    "Create a public constructor that takes zero arguments to be able to autolink this HybridObject.");
      return std::make_shared<HybridMMKVFactory>();
    }
  );
  HybridObjectRegistry::registerHybridObjectConstructor(
    "MMKVPlatformContext",
    []() -> std::shared_ptr<HybridObject> {
      std::shared_ptr<HybridMMKVPlatformContextSpec> hybridObject = NitroMmkv::NitroMmkvAutolinking::createMMKVPlatformContext();
      return hybridObject;
    }
  );
}

@end
